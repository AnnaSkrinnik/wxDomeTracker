# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Sun Jun  5 12:23:04 2011

import wx
import wx.lib.agw.floatspin as FS
import sqlite3
import sys
import os
import datetime
from obstools import obsmathlib, argoterm
import math
import sysdisp

INSTALLED_PATH = os.path.abspath('')
IMAGE_DIRECTORY = os.path.join(INSTALLED_PATH, "res")
ICON_DIRECTORY = os.path.join(IMAGE_DIRECTORY, "24")
CONFIG_DIRECTORY = os.path.join(INSTALLED_PATH, "dat")
DOC_DIRECTORY = os.path.join(INSTALLED_PATH, "doc")
SQL_DATABASE = os.path.join(CONFIG_DIRECTORY, "objects.dat")
OBJECT_DIRECTORY = os.path.join(INSTALLED_PATH, "objects")

# begin wxGlade: extracode
# end wxGlade

TIMER_ID = 100
WX_WHITE = wx.Colour(255, 255, 255)
WX_RED = wx.Colour(255, 0, 0)
DISPLAY_FONT_SIZE = 110
FONT_DIGITAL = "Digital-7 Mono"
FONT_STR = ""
TIME = 0
SOCKET_HOST = 'localhost'
SOCKET_PORT = 10000

POWER_OFF = 0x80
DEFAULT_REPEAT_INTERVAL = 100

ID_CHOOSE_FILE = 600

# ==============================================================================
# CONFIGURE PLANTARIUM SERVER
# ==============================================================================

class ConfigureServerFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ConfigureServerFrame.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.fraServerSettings_staticbox = wx.StaticBox(self, -1, "Server Settings")
        self.fraClients_staticbox = wx.StaticBox(self, -1, "Client Type")
        self.bmpServer = wx.StaticBitmap(self, -1, wx.Bitmap(os.path.join(IMAGE_DIRECTORY,"computer.png"), wx.BITMAP_TYPE_ANY))
        self.lblTip = wx.StaticText(self, -1, "wxDomeTracker must be restarted for these \nsettings to take effect!")
        self.rdoStellarium = wx.RadioButton(self, -1, "Stellarium")
        self.rdoSoftwareBisque = wx.RadioButton(self, -1, "Software Bisque TheSkyX")
        self.chkEnableServerOnStart = wx.CheckBox(self, -1, "Enable server daemon on program start?")
        self.lblIPAddress = wx.StaticText(self, -1, "Host Address")
        self.txtIPAddress = wx.TextCtrl(self, -1, "localhost")
        self.lblPortLabel = wx.StaticText(self, -1, "Port")
        self.spnPort = wx.SpinCtrl(self, -1, "10001", min=1024, max=20000)
        self.lblRefreshRate = wx.StaticText(self, -1, "Packet Rate (ms)")
        self.spnRefreshRate = wx.SpinCtrl(self, -1, "100", min=50, max=1000)
        self.cmdOkay = wx.Button(self, wx.ID_OK, "")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")
        
        self.enableOnStart = 0
        self.hostaddress = 'localhost'
        self.port = 10001
        self.packetrate = 150

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ConfigureServerFrame.__set_properties
        self.SetTitle("Configure Planetarium Server")
        self.rdoStellarium.SetValue(1)
        self.rdoSoftwareBisque.Enable(False)
        self.txtIPAddress.SetMinSize((163, 27))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ConfigureServerFrame.__do_layout
        szrMain = wx.BoxSizer(wx.VERTICAL)
        grdControls = wx.FlexGridSizer(1, 2, 10, 10)
        fraServerSettings = wx.StaticBoxSizer(self.fraServerSettings_staticbox, wx.VERTICAL)
        grdSettings = wx.FlexGridSizer(3, 2, 5, 5)
        fraClients = wx.StaticBoxSizer(self.fraClients_staticbox, wx.VERTICAL)
        grdHeading = wx.FlexGridSizer(1, 2, 10, 10)
        grdHeading.Add(self.bmpServer, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdHeading.Add(self.lblTip, 0, wx.ALIGN_CENTER_VERTICAL, 10)
        grdHeading.AddGrowableCol(1)
        szrMain.Add(grdHeading, 0, wx.ALL|wx.EXPAND, 10)
        fraClients.Add(self.rdoStellarium, 0, wx.ALL, 5)
        fraClients.Add(self.rdoSoftwareBisque, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM, 5)
        szrMain.Add(fraClients, 0, wx.ALL|wx.EXPAND, 10)
        fraServerSettings.Add(self.chkEnableServerOnStart, 0, wx.LEFT|wx.RIGHT|wx.TOP, 5)
        grdSettings.Add(self.lblIPAddress, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdSettings.Add(self.txtIPAddress, 0, wx.EXPAND, 0)
        grdSettings.Add(self.lblPortLabel, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdSettings.Add(self.spnPort, 0, wx.EXPAND, 0)
        grdSettings.Add(self.lblRefreshRate, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdSettings.Add(self.spnRefreshRate, 0, wx.EXPAND, 0)
        grdSettings.AddGrowableCol(1)
        fraServerSettings.Add(grdSettings, 1, wx.ALL|wx.EXPAND, 5)
        szrMain.Add(fraServerSettings, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        grdControls.Add(self.cmdOkay, 0, 0, 0)
        grdControls.Add(self.cmdCancel, 0, 0, 0)
        szrMain.Add(grdControls, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrMain)
        szrMain.Fit(self)
        self.Layout()
        # end wxGlade
    
    def GetValues(self):
        self.enableOnStart = self.chkEnableServerOnStart.GetValue()
        self.hostaddress = self.txtIPAddress.GetValue()
        self.port = self.spnPort.GetValue()
        self.packetrate = self.spnRefreshRate.GetValue()
        
        if self.enableOnStart == True:
            self.enableOnStart = 1
        else:
            self.enableOnStart = 0
        
        return (self.enableOnStart, self.hostaddress, self.port, self.packetrate)
        
    
    def SetValues(self, enable, host, port, packetrate):
        self.enableOnStart = enable
        self.hostaddress = host
        self.port = port
        self.packetrate = packetrate
                
        self.chkEnableServerOnStart.SetValue(self.enableOnStart)
        self.txtIPAddress.SetValue(self.hostaddress)
        self.spnPort.SetValue(self.port)
        self.spnRefreshRate.SetValue(self.packetrate)
        
# end of class ConfigureServerFrame

# ==============================================================================
# SET TARGET OBJECT FRAME
# ==============================================================================

class SetTargetObject(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: dlgSetTargetObject.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.fraTargetPosition_staticbox = wx.StaticBox(self, -1, "Target Object Position (J2000)")
        self.fraTargetName_staticbox = wx.StaticBox(self, -1, "Target Object")
        self.lblObjectName = wx.StaticText(self, -1, "Name:")
        self.txtObjectName = wx.TextCtrl(self, -1, "MyStar")
        self.cmdDatabase = wx.Button(self, -1, "Pick Star...")
        self.lblRA = wx.StaticText(self, -1, "RA")
        self.lblRAHours = wx.StaticText(self, -1, "Hours:")
        self.snpRAHours = wx.SpinCtrl(self, -1, "", min=0, max=23)
        self.lblRAMinutes = wx.StaticText(self, -1, "Minutes:")
        self.spnRAMinutes = wx.SpinCtrl(self, -1, "", min=0, max=59)
        self.lblRASeconds = wx.StaticText(self, -1, "Seconds:")
        self.spnRASeconds = wx.SpinCtrl(self, -1, "", min=0, max=59)
        self.lblDEC_copy = wx.StaticText(self, -1, "DEC")
        self.lblDecDegrees = wx.StaticText(self, -1, "Degrees:")
        self.spnDecDegrees = wx.SpinCtrl(self, -1, "0", min=-90, max=90)
        self.lblDecMinutes = wx.StaticText(self, -1, "Minutes:")
        self.spnDecMinutes = wx.SpinCtrl(self, -1, "", min=0, max=59)
        self.lblDecSeconds = wx.StaticText(self, -1, "Seconds:")
        self.spnDecSeconds = wx.SpinCtrl(self, -1, "", min=0, max=59)
        self.cmdLoad = wx.Button(self, -1, "&Load")
        self.cmdSave = wx.Button(self, -1, "&Save")
        self.static_line_1 = wx.StaticLine(self, -1, style=wx.LI_VERTICAL)
        self.cmdOkay = wx.Button(self, wx.ID_OK, "")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")
        
        self.target_data = None

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_SPINCTRL, self.OnDegreeSpin, self.spnDecDegrees)
        self.Bind(wx.EVT_BUTTON, self.OnPickTarget, self.cmdDatabase)
        self.Bind(wx.EVT_BUTTON, self.OnLoad, self.cmdLoad)
        self.Bind(wx.EVT_BUTTON, self.OnSave, self.cmdSave)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: dlgSetTargetObject.__set_properties
        self.SetTitle("Set Target Object (J2000)")
        self.lblRA.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.lblDEC_copy.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: dlgSetTargetObject.__do_layout
        szrMain = wx.BoxSizer(wx.VERTICAL)
        grdObjectOptions = wx.FlexGridSizer(1, 5, 10, 10)
        fraTargetPosition = wx.StaticBoxSizer(self.fraTargetPosition_staticbox, wx.VERTICAL)
        grdCoordinates = wx.FlexGridSizer(2, 7, 5, 5)
        fraTargetName = wx.StaticBoxSizer(self.fraTargetName_staticbox, wx.VERTICAL)
        grdName = wx.FlexGridSizer(1, 3, 10, 10)
        grdName.Add(self.lblObjectName, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdName.Add(self.txtObjectName, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        grdName.Add(self.cmdDatabase, 0, 0, 0)
        grdName.AddGrowableCol(1)
        fraTargetName.Add(grdName, 1, wx.ALL|wx.EXPAND, 5)
        szrMain.Add(fraTargetName, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        grdCoordinates.Add(self.lblRA, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.lblRAHours, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.snpRAHours, 0, 0, 0)
        grdCoordinates.Add(self.lblRAMinutes, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnRAMinutes, 0, 0, 0)
        grdCoordinates.Add(self.lblRASeconds, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnRASeconds, 0, 0, 0)
        grdCoordinates.Add(self.lblDEC_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.lblDecDegrees, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnDecDegrees, 0, 0, 0)
        grdCoordinates.Add(self.lblDecMinutes, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnDecMinutes, 0, 0, 0)
        grdCoordinates.Add(self.lblDecSeconds, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnDecSeconds, 0, 0, 0)
        fraTargetPosition.Add(grdCoordinates, 0, wx.ALL, 5)
        szrMain.Add(fraTargetPosition, 0, wx.LEFT|wx.RIGHT|wx.TOP, 10)
        grdObjectOptions.Add(self.cmdLoad, 0, 0, 0)
        grdObjectOptions.Add(self.cmdSave, 0, 0, 0)
        grdObjectOptions.Add(self.static_line_1, 0, wx.EXPAND, 0)
        grdObjectOptions.Add(self.cmdOkay, 0, 0, 0)
        grdObjectOptions.Add(self.cmdCancel, 0, 0, 0)
        grdObjectOptions.AddGrowableCol(2)
        szrMain.Add(grdObjectOptions, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrMain)
        szrMain.Fit(self)
        self.Layout()
        self.Center()
        # end wxGlade
    
    def SetValues(self, ra, dec, name):
        self.snpRAHours.SetValue(ra[0])
        self.spnRAMinutes.SetValue(ra[1])
        self.spnRASeconds.SetValue(ra[2])
        self.spnDecDegrees.SetValue(dec[0])
        self.spnDecMinutes.SetValue(dec[1])
        self.spnDecSeconds.SetValue(dec[2])
        
        self.txtObjectName.SetValue(name)
    
    def GetValues(self):
        # returns the data for the object as a tuple
        if not self.target_data:
            ra = (self.snpRAHours.GetValue(), self.spnRAMinutes.GetValue(), self.spnRASeconds.GetValue())
            dec = (self.spnDecDegrees.GetValue(), self.spnDecMinutes.GetValue(), self.spnDecSeconds.GetValue())
            name = self.txtObjectName.GetValue()
            
            return (0, (ra, dec, name))
        else:
            return (1, self.target_data)

    def OnPickTarget(self, event): # wxGlade: dlgSetTargetObject.<event_handler>
        dlg = StarBrowserFrame(self)
        
        if dlg.ShowModal() == wx.ID_OK:
            val = dlg.GetTargetObject()
            if val != None:
                #obj = self.GetDatabaseObject(os.path.join(CONFIG_DIRECTORY, "objects.dat"), val[0])
                
                val["RA"] = obsmathlib.HoursToRightAscension(val["RA"])
                val["DEC"] = obsmathlib.DegreesToDeclination(val["DEC"])
                self.target_data = val
                targetRA = val["RA"]
                targetDEC = val["DEC"]

                self.snpRAHours.SetValue(int(targetRA[0]))
                self.spnRAMinutes.SetValue(int(targetRA[1]))
                self.spnRASeconds.SetValue(int(targetRA[2]))
                self.spnDecDegrees.SetValue(int(targetDEC[0]))
                self.spnDecMinutes.SetValue(int(targetDEC[1]))
                self.spnDecSeconds.SetValue(int(targetDEC[2]))
                
                self.txtObjectName.SetValue(val["DISPLAY_NAME"])
                
        dlg.Destroy()

    def OnDegreeSpin(self, event): # wxGlade: dlgSetTargetObject.<event_handler>
        if (self.spnDecDegrees.GetValue() == 90) or (self.spnDecDegrees.GetValue() == -90):
            self.spnDecMinutes.SetValue(0)
            self.spnDecSeconds.SetValue(0)
            
    def OnLoad(self, event): # wxGlade: dlgSetTargetObject.<event_handler>
        dlg = wx.FileDialog(
            self, message="Load Object Coordinate",
            defaultDir=OBJECT_DIRECTORY, 
            defaultFile="",
            wildcard="Dome Tracker Coordinate (*.dtc)|*.dtc|All files (*.*)|*.*",
            style=wx.OPEN | wx.CHANGE_DIR
            )
        
        if dlg.ShowModal() == wx.ID_OK:
            paths = dlg.GetPaths()
            coordFilePath = paths[0]
            
            f = open(coordFilePath, 'r')
            lines = f.readlines()
            f.close()
            
            data = lines[0]
            data = data.split(',')
            
            name = data[0]
            ra = (int(data[1]), int(data[2]), int(data[3]))
            dec = (int(data[4]), int(data[5]), int(data[6]))
            epoch = float(data[7])
            
            self.SetValues(ra, dec, name)
        
        # Destroy the dialog. Don't do this until you are done with it!
        # BAD things can happen otherwise!
        dlg.Destroy()

    def OnSave(self, event): # wxGlade: dlgSetTargetObject.<event_handler>
        file_name = self.txtObjectName.GetValue().replace(' ', '_') + ".dtc"
        dlg = wx.FileDialog(
            self, message="Save Object Coordinates", defaultDir=os.getcwd(), 
            defaultFile=file_name, wildcard="Dome Tracker Coordinate (*.dtc)|*.dtc", style=wx.SAVE|wx.CHANGE_DIR
            )
        
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            if not (path.lower()).endswith('.dtc'):
                path = path + '.dtc'
            
            name = self.txtObjectName.GetValue()
            ra = (self.snpRAHours.GetValue(), self.spnRAMinutes.GetValue(), self.spnRASeconds.GetValue())
            dec = (self.spnDecDegrees.GetValue(), self.spnDecMinutes.GetValue(), self.spnDecSeconds.GetValue())

            f = open(path, 'w')
            
            line = "%s,%s,%s,%s,%s,%s,%s,%s\n" % (name, ra[0], ra[1], ra[2], dec[0], dec[1], dec[2], 2000.0)
            
            f.write(line)
            f.close()
        
        dlg.Destroy()

# end of class dlgSetTargetObject

# ==============================================================================
# TELESCOPE MODE FRAME
# ==============================================================================

class TelescopeModeFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: TelescopeModeFrame.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.fraManualTelescopePosition_staticbox = wx.StaticBox(self, -1, "Virtual Telescope Position")
        self.fraPositionMode_staticbox = wx.StaticBox(self, -1, "Telescope Position")
        self.rdoTelescopeDigital = wx.RadioButton(self, -1, "Use Argo Navis (Digital Optical Encoders)")
        self.rdoTelescopeManual = wx.RadioButton(self, -1, "Use Virtual Telescope Position (Simulated Telescope)")
        self.lblRA = wx.StaticText(self, -1, "RA")
        self.lblRAHours = wx.StaticText(self, -1, "Hours:")
        self.snpRAHours = wx.SpinCtrl(self, -1, "", min=0, max=23)
        self.lblRAMinutes = wx.StaticText(self, -1, "Minutes:")
        self.spnRAMinutes = wx.SpinCtrl(self, -1, "", min=0, max=59)
        self.lblRASeconds = wx.StaticText(self, -1, "Seconds:")
        self.spnRASeconds = wx.SpinCtrl(self, -1, "", min=0, max=59)
        self.lblDEC = wx.StaticText(self, -1, "DEC")
        self.lblDecDegrees = wx.StaticText(self, -1, "Degrees:")
        self.spnDecDegrees = wx.SpinCtrl(self, -1, "0", min=-90, max=90)
        self.lblDecMinutes = wx.StaticText(self, -1, "Minutes:")
        self.spnDecMinutes = wx.SpinCtrl(self, -1, "", min=0, max=59)
        self.lblDecSeconds = wx.StaticText(self, -1, "Seconds:")
        self.spnDecSeconds = wx.SpinCtrl(self, -1, "", min=0, max=59)
        self.cmdOkay = wx.Button(self, wx.ID_OK, "")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")
        
        self.telescopeMode = 0
        self.virtualTelescopeCoords = (0.0, 0.0, 0.0)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBUTTON, self.OnDigitalPosition, self.rdoTelescopeDigital)
        self.Bind(wx.EVT_RADIOBUTTON, self.OnManualPosition, self.rdoTelescopeManual)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: TelescopeModeFrame.__set_properties
        self.SetTitle("Telescope Position")
        self.lblRA.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.lblDEC.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: TelescopeModeFrame.__do_layout
        szrMain = wx.BoxSizer(wx.VERTICAL)
        grdButtons = wx.FlexGridSizer(1, 2, 10, 10)
        fraManualTelescopePosition = wx.StaticBoxSizer(self.fraManualTelescopePosition_staticbox, wx.VERTICAL)
        grdCoordinates = wx.FlexGridSizer(2, 7, 5, 5)
        fraPositionMode = wx.StaticBoxSizer(self.fraPositionMode_staticbox, wx.VERTICAL)
        fraPositionMode.Add(self.rdoTelescopeDigital, 0, wx.ALL, 5)
        fraPositionMode.Add(self.rdoTelescopeManual, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM, 5)
        szrMain.Add(fraPositionMode, 0, wx.ALL|wx.EXPAND, 10)
        grdCoordinates.Add(self.lblRA, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.lblRAHours, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.snpRAHours, 0, 0, 0)
        grdCoordinates.Add(self.lblRAMinutes, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnRAMinutes, 0, 0, 0)
        grdCoordinates.Add(self.lblRASeconds, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnRASeconds, 0, 0, 0)
        grdCoordinates.Add(self.lblDEC, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.lblDecDegrees, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnDecDegrees, 0, 0, 0)
        grdCoordinates.Add(self.lblDecMinutes, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnDecMinutes, 0, 0, 0)
        grdCoordinates.Add(self.lblDecSeconds, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdCoordinates.Add(self.spnDecSeconds, 0, 0, 0)
        fraManualTelescopePosition.Add(grdCoordinates, 0, wx.ALL, 5)
        szrMain.Add(fraManualTelescopePosition, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        grdButtons.Add(self.cmdOkay, 0, 0, 0)
        grdButtons.Add(self.cmdCancel, 0, 0, 0)
        szrMain.Add(grdButtons, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrMain)
        szrMain.Fit(self)
        self.Layout()
        self.Center()
        # end wxGlade
    
    def SetValues(self, mode, vtcoord, argo=False):
        self.telescopeMode = mode
        
        if not argo:
            self.rdoTelescopeDigital.Enabled = False
            self.rdoTelescopeManual.SetValue(True)
        
        if self.telescopeMode == 0:
            self.rdoTelescopeDigital.SetValue(True)
        elif self.telescopeMode == 1:
            self.rdoTelescopeManual.SetValue(True)
            
        ra, dec = vtcoord
        
        self.snpRAHours.SetValue(ra[0])
        self.spnRAMinutes.SetValue(ra[1])
        self.spnRASeconds.SetValue(ra[2])
        self.spnDecDegrees.SetValue(dec[0])
        self.spnDecMinutes.SetValue(dec[1])
        self.spnDecSeconds.SetValue(dec[2])
    
    def GetValues(self):
        ra = (self.snpRAHours.GetValue(), self.spnRAMinutes.GetValue(), self.spnRASeconds.GetValue())
        dec = (self.spnDecDegrees.GetValue(), self.spnDecMinutes.GetValue(), self.spnDecSeconds.GetValue())
        
        return (self.telescopeMode, (ra, dec))

    def OnDigitalPosition(self, event): # wxGlade: TelescopeModeFrame.<event_handler>
        self.telescopeMode = 0

    def OnManualPosition(self, event): # wxGlade: TelescopeModeFrame.<event_handler>
        self.telescopeMode = 1

# ==============================================================================
# SESSION CALCULATOR FRAME
# ==============================================================================

class HourAngleError(Exception):
     def __init__(self, value):
         self.value = value
     def __str__(self):
         return repr(self.value)

class SessionsCalculatorFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SessionsCalculatorFrame.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.fraResults_staticbox = wx.StaticBox(self, -1, "Results")
        self.fraHARange_staticbox = wx.StaticBox(self, -1, "Session Hour Angle Range")
        self.lblExposureLength = wx.StaticText(self, -1, "CCD Exposure Length (s):")
        self.spnExposureLength = FS.FloatSpin(self, -1, min_val=0.01, max_val=3600.0,
                                       increment=0.1, value=1.0, agwStyle=FS.FS_LEFT)
        self.spnExposureLength.SetFormat("%G")
        self.spnExposureLength.SetDigits(8)
                                       
        minutes = []
        for i in range(60):
            minutes.append(str(i))

        self.lblHAStart = wx.StaticText(self, -1, "Start HA (HH:MM)")
        self.cboHAStartSign = wx.Choice(self, -1, choices=["+", "-"])
        self.cboHAStartHour = wx.Choice(self, -1, choices=["0", "1", "2", "3", "4", "5", "6"])
        self.lblStartColon = wx.StaticText(self, -1, ":")
        self.cboHAStartMinute = wx.Choice(self, -1, choices=minutes)
        self.lblHAEnd = wx.StaticText(self, -1, "End HA (HH:MM)")
        self.cboHAEndSign = wx.Choice(self, -1, choices=["+", "-"])
        self.cboHAEndHour = wx.Choice(self, -1, choices=["0", "1", "2", "3", "4", "5", "6"])
        self.lblEndColon = wx.StaticText(self, -1, ":")
        self.cboHAEndMinute = wx.Choice(self, -1, choices=minutes)
        self.lblSessionDuration = wx.StaticText(self, -1, "Session Duration:")
        self.lblDurationResults = wx.StaticText(self, -1, "Unknown")
        self.lblCCDExposureCount = wx.StaticText(self, -1, "CCD Exposure Count:")
        self.lblCCDResults = wx.StaticText(self, -1, "Unknown")
        self.cmdCalculate = wx.Button(self, -1, "Calculate")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHOICE, self.OnStartHour, self.cboHAStartHour)
        self.Bind(wx.EVT_CHOICE, self.OnStartMinute, self.cboHAStartMinute)
        self.Bind(wx.EVT_CHOICE, self.OnEndHour, self.cboHAEndHour)
        self.Bind(wx.EVT_CHOICE, self.OnEndMinute, self.cboHAEndMinute)
        self.Bind(wx.EVT_BUTTON, self.OnCalculate, self.cmdCalculate)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: SessionsCalculatorFrame.__set_properties
        self.SetTitle("Research Session Calculator")
        self.cboHAStartSign.SetSelection(0)
        self.cboHAStartHour.SetSelection(0)
        self.cboHAStartMinute.SetSelection(0)
        self.cboHAEndSign.SetSelection(0)
        self.cboHAEndHour.SetSelection(1)
        self.cboHAEndMinute.SetSelection(0)
        self.lblDurationResults.SetFont(wx.Font(12, wx.MODERN, wx.NORMAL, wx.BOLD, 0, ""))
        self.lblCCDResults.SetFont(wx.Font(12, wx.MODERN, wx.NORMAL, wx.BOLD, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SessionsCalculatorFrame.__do_layout
        szrMain = wx.BoxSizer(wx.VERTICAL)
        grdButtons = wx.GridSizer(1, 2, 5, 5)
        fraResults = wx.StaticBoxSizer(self.fraResults_staticbox, wx.HORIZONTAL)
        grdResults = wx.FlexGridSizer(2, 2, 5, 5)
        fraHARange = wx.StaticBoxSizer(self.fraHARange_staticbox, wx.VERTICAL)
        grdHARange = wx.FlexGridSizer(2, 5, 10, 5)
        grdExposure = wx.FlexGridSizer(1, 2, 5, 5)
        grdExposure.Add(self.lblExposureLength, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdExposure.Add(self.spnExposureLength, 0, wx.EXPAND, 0)
        grdExposure.AddGrowableCol(1)
        szrMain.Add(grdExposure, 0, wx.ALL|wx.EXPAND, 10)
        grdHARange.Add(self.lblHAStart, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdHARange.Add(self.cboHAStartSign, 0, 0, 0)
        grdHARange.Add(self.cboHAStartHour, 0, 0, 0)
        grdHARange.Add(self.lblStartColon, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdHARange.Add(self.cboHAStartMinute, 0, 0, 0)
        grdHARange.Add(self.lblHAEnd, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdHARange.Add(self.cboHAEndSign, 0, 0, 0)
        grdHARange.Add(self.cboHAEndHour, 0, 0, 0)
        grdHARange.Add(self.lblEndColon, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdHARange.Add(self.cboHAEndMinute, 0, 0, 0)
        fraHARange.Add(grdHARange, 0, wx.ALL|wx.EXPAND, 5)
        szrMain.Add(fraHARange, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        grdResults.Add(self.lblSessionDuration, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdResults.Add(self.lblDurationResults, 0, 0, 0)
        grdResults.Add(self.lblCCDExposureCount, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdResults.Add(self.lblCCDResults, 0, 0, 0)
        fraResults.Add(grdResults, 1, wx.ALL|wx.EXPAND, 5)
        szrMain.Add(fraResults, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        grdButtons.Add(self.cmdCalculate, 0, 0, 5)
        grdButtons.Add(self.cmdCancel, 0, 0, 0)
        szrMain.Add(grdButtons, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrMain)
        
        self.OnCalculate()
        
        szrMain.Fit(self)
        self.Layout()
        
        # end wxGlade

    def setHourAngle(self, val_ha=(0,0,0)):
        if val_ha[0] <= -0.0:
            self.cboHAStartSign.SetSelection(1)
        
        self.cboHAStartHour.SetSelection(val_ha[0])
        self.cboHAStartMinute.SetSelection(val_ha[1])

    def checkHourAngle(self, f_hr_init, f_hr_end):
        # Sanity checks to see if the values given are valid.
        # HA is ranged between -6.0 to 6.0 hours since no data can be taken outside
        # that given range.
        
        valid = True
        if (f_hr_init < -6.0) or (f_hr_init > 6.0):            
            valid = False
        elif (f_hr_end < -6.0) or (f_hr_end > 6.0):
            valid = False 
        elif (f_hr_init >= f_hr_end):
            valid = False
        
        return valid

    def getHourAngleDuration(self, ha_init, ha_end):
        interval_seconds = obsmathlib.getIntervalSeconds(ha_init, ha_end)
                
        return interval_seconds
        
    def convertToSeconds(self, f_ha_hours):
        # convert from float hours to integer seconds
        interval_seconds = int(f_ha_hours * 3600.0)
        
        return interval_seconds
    
    def OnStartHour(self, event): # wxGlade: SessionsCalculatorFrame.<event_handler>
        print "Event handler `OnStartHour' not implemented!"
        event.Skip()

    def OnStartMinute(self, event): # wxGlade: SessionsCalculatorFrame.<event_handler>
        print "Event handler `OnStartMinute' not implemented!"
        event.Skip()

    def OnEndHour(self, event): # wxGlade: SessionsCalculatorFrame.<event_handler>
        print "Event handler `OnEndHour' not implemented!"
        event.Skip()

    def OnEndMinute(self, event): # wxGlade: SessionsCalculatorFrame.<event_handler>
        print "Event handler `OnEndMinute' not implemented!"
        event.Skip()

    def OnCalculate(self, event=None): # wxGlade: SessionsCalculatorFrame.<event_handler>        
        start_hour = self.cboHAStartHour.GetCurrentSelection()
        start_minute = self.cboHAStartMinute.GetCurrentSelection()
        start_second = 0
        
        end_hour = self.cboHAEndHour.GetCurrentSelection()
        end_minute = self.cboHAEndMinute.GetCurrentSelection()
        end_second = 0
        
        if self.cboHAStartSign.GetCurrentSelection() == 1:
            start_hour = -1 * start_hour 
            start_minute = -1 * start_minute
            start_second = -1 * start_second
        elif self.cboHAEndSign.GetCurrentSelection() == 1:
            end_hour = -1 * end_hour 
            end_minute = -1 * end_minute
            end_second = -1 * end_second
        
        t_ha_start = (start_hour, start_minute, start_second)
        t_ha_end = (end_hour, end_minute, end_second)
        
        ha_intv = self.getHourAngleDuration(t_ha_start, t_ha_end)
        if ha_intv:
            interval_time = obsmathlib.HoursToRightAscension(ha_intv / 3600.0)
            self.lblDurationResults.SetLabel('%02d:%02d' % (interval_time[0], interval_time[1]))
            
            # calculate the number of CCD exposures that can be taken
            exp_len = self.spnExposureLength.GetValue()
            n_exposure = int(ha_intv / exp_len)
            
            self.lblCCDResults.SetLabel(str(n_exposure))
            
        else:
            dlg = wx.MessageDialog(self, 
                "Invalid hour angle range specified.", 
                'System Error', wx.OK | wx.ICON_ERROR)
                
            dlg.ShowModal()

# ==============================================================================
# RECORD MACRO FRAME
# ==============================================================================

class RecordMacroFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: RecordMacroFrame.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.szrTimeScale_staticbox = wx.StaticBox(self, -1, "Reference Mode")
        self.fraBindEvents_staticbox = wx.StaticBox(self, -1, "Bind Events")
        self.lblMacroName = wx.StaticText(self, -1, "Macro Name:")
        self.txtMacroName = wx.TextCtrl(self, -1, "")
        self.chkDomeMotion = wx.CheckBox(self, -1, "Dome Rotation/Shutter")
        self.chkDomeMotion.Enabled = False
        self.chkTelescopePower = wx.CheckBox(self, -1, "Telescope Power")
        self.chkTelescopePower.Enabled = False
        self.chkTelescopeMotion = wx.CheckBox(self, -1, "Telescope Motion")
        self.chkTelescopeMotion.Enabled = False
        self.chkTelescopeFocus = wx.CheckBox(self, -1, "Telescope Focus")
        self.chkTelescopeFocus.Enabled = False
        self.rdoSiderial = wx.RadioButton(self, -1, "Siderial Time (Absolute)")
        self.rdoLocalTime = wx.RadioButton(self, -1, "Hour Angle (Relative)")
        #self.lblMacroFile = wx.StaticText(self, -1, "Macro File:")
        #self.MACROFILE = wx.Button(self, ID_CHOOSE_FILE, "Choose &File...")
        self.cmdOkay = wx.Button(self, wx.ID_OK, "&Record")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")
        
        self.binding_count = 1
        
        self.file_path = None
        self.flags = (0,0,0,0)
        self.time_scale = 0
        self.macro_name = "new_macro"
        
        self.txtMacroName.SetValue(self.macro_name)
        
        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.OnDomeRotationToggle, self.chkDomeMotion)
        self.Bind(wx.EVT_CHECKBOX, self.OnTelescopePowerToggle, self.chkTelescopePower)
        self.Bind(wx.EVT_CHECKBOX, self.OnTelescopeMotionToggle, self.chkTelescopeMotion)
        self.Bind(wx.EVT_CHECKBOX, self.OnTelescopeFocusToggle, self.chkTelescopeFocus)
        self.Bind(wx.EVT_RADIOBUTTON, self.OnSiderialClicked, self.rdoSiderial)
        self.Bind(wx.EVT_RADIOBUTTON, self.OnLocalTimeClicked, self.rdoLocalTime)
        #self.Bind(wx.EVT_BUTTON, self.OnChooseFile, self.MACROFILE)
        # end wxGlade
        
        self.CheckOkayAllowed()

    def __set_properties(self):
        # begin wxGlade: RecordMacroFrame.__set_properties
        self.SetTitle("Record New Macro")
        self.chkDomeMotion.SetValue(1)
        self.rdoSiderial.SetValue(1)
        self.rdoLocalTime.Enable(True)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: RecordMacroFrame.__do_layout
        szrMain = wx.BoxSizer(wx.VERTICAL)
        grdControls = wx.GridSizer(1, 2, 10, 10)
        #grdMacroFile = wx.FlexGridSizer(1, 2, 5, 5)
        szrTimeScale = wx.StaticBoxSizer(self.szrTimeScale_staticbox, wx.HORIZONTAL)
        fraBindEvents = wx.StaticBoxSizer(self.fraBindEvents_staticbox, wx.HORIZONTAL)
        grdBindEvents = wx.GridSizer(2, 2, 5, 5)
        grdMacroName = wx.FlexGridSizer(3, 2, 5, 5)
        grdMacroName.Add(self.lblMacroName, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdMacroName.Add(self.txtMacroName, 0, wx.EXPAND, 0)
        grdMacroName.AddGrowableCol(1)
        szrMain.Add(grdMacroName, 0, wx.ALL|wx.EXPAND, 10)
        grdBindEvents.Add(self.chkDomeMotion, 0, 0, 0)
        grdBindEvents.Add(self.chkTelescopePower, 0, 0, 0)
        grdBindEvents.Add(self.chkTelescopeMotion, 0, 0, 0)
        grdBindEvents.Add(self.chkTelescopeFocus, 0, 0, 0)
        fraBindEvents.Add(grdBindEvents, 1, wx.ALL|wx.EXPAND, 5)
        szrMain.Add(fraBindEvents, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.EXPAND, 10)
        szrTimeScale.Add(self.rdoSiderial, 1, wx.ALL|wx.EXPAND, 5)
        szrTimeScale.Add(self.rdoLocalTime, 1, wx.ALL|wx.EXPAND, 5)
        szrMain.Add(szrTimeScale, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        #grdMacroFile.Add(self.lblMacroFile, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        #grdMacroFile.Add(self.MACROFILE, 0, wx.EXPAND, 0)
        #grdMacroFile.AddGrowableCol(1)
        #szrMain.Add(grdMacroFile, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        grdControls.Add(self.cmdOkay, 0, 0, 0)
        grdControls.Add(self.cmdCancel, 0, 0, 0)
        szrMain.Add(grdControls, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrMain)
        szrMain.Fit(self)
        self.Layout()
        self.Center()
        # end wxGlade

    #def OnChooseFile(self, event):
        #file_name = self.txtMacroName.GetValue()
        #dlg = wx.FileDialog(
            #self, message="Save macro as...", defaultDir=os.getcwd(), 
            #defaultFile=file_name, wildcard="Dome Tracker Macro (*.dtm)|*.dtm", style=wx.SAVE|wx.CHANGE_DIR
            #)
        
        #if dlg.ShowModal() == wx.ID_OK:
            #path = dlg.GetPath()
            #if not (path.lower()).endswith('.dtm'):
                #path = path + '.dtm'
            
            #self.file_path = path
            #self.CheckOkayAllowed()
            #button_label = os.path.basename(self.file_path)
            #self.MACROFILE.SetLabel(button_label)
        
        #dlg.Destroy()
        
    def GetValues(self):
        self.macro_name = self.txtMacroName.GetValue()
        flags = (self.chkDomeMotion.GetValue(), 
            self.chkTelescopeMotion.GetValue(),
            self.chkTelescopePower.GetValue(),
            self.chkTelescopeFocus.GetValue())
        
        return_args = (self.macro_name, self.time_scale, flags) 
        
        return return_args
    
    def CheckOkayAllowed(self):
        if (self.binding_count > 0):
            self.cmdOkay.Enable(True)
        else:
            self.cmdOkay.Enable(False)
            
    def OnDomeRotationToggle(self, event): # wxGlade: RecordMacroFrame.<event_handler>
        if self.chkDomeMotion.GetValue():
            self.binding_count += 1
        else:
            self.binding_count -= 1
        
        self.CheckOkayAllowed()

    def OnTelescopePowerToggle(self, event): # wxGlade: RecordMacroFrame.<event_handler>
        if self.chkTelescopePower.GetValue():
            self.binding_count += 1
        else:
            self.binding_count -= 1
        
        self.CheckOkayAllowed()

    def OnTelescopeMotionToggle(self, event): # wxGlade: RecordMacroFrame.<event_handler>
        if self.chkTelescopeMotion.GetValue():
            self.binding_count += 1
        else:
            self.binding_count -= 1
        
        self.CheckOkayAllowed()

    def OnTelescopeFocusToggle(self, event): # wxGlade: RecordMacroFrame.<event_handler>
        if self.chkTelescopeFocus.GetValue():
            self.binding_count += 1
        else:
            self.binding_count -= 1
        
        self.CheckOkayAllowed()

    def OnSiderialClicked(self, event): # wxGlade: RecordMacroFrame.<event_handler>
        self.time_scale = 0
        
    def OnLocalTimeClicked(self, event): # wxGlade: RecordMacroFrame.<event_handler>
        self.time_scale = 1

# ==============================================================================
# RAIN SENSOR FRAME
# ==============================================================================

class RainSensorFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: RainSensorFrame.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        #self.fraActions_staticbox = wx.StaticBox(self, -1, "Actions")
        self.chkEnableRainSensor = wx.CheckBox(self, -1, "Enable Rain Sensor")
        self.lblInterval = wx.StaticText(self, -1, "Sensor polling interval (seconds)")
        self.spnInterval = wx.SpinCtrl(self, -1, "0", min=1, max=120)
        #self.chkWarningMessage = wx.CheckBox(self, -1, "Display Warning Message")
        #self.chkShutdown = wx.CheckBox(self, -1, "Shutdown")
        #self.lblDelay = wx.StaticText(self, -1, "Shutdown Delay (seconds)")
        #self.spnDelay = wx.SpinCtrl(self, -1, "30", min=1, max=120)
        self.cmdOkay = wx.Button(self, wx.ID_OK, "")
        self.Cancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: RainSensorFrame.__set_properties
        self.SetTitle("Rain Sensor Settings")
        self.chkEnableRainSensor.SetValue(1)
        self.chkEnableRainSensor.Enabled = False
        self.spnInterval.SetValue(5)
        #self.chkWarningMessage.SetValue(1)
        #self.chkShutdown.SetValue(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: RainSensorFrame.__do_layout
        szrRainSensor = wx.BoxSizer(wx.VERTICAL)
        grdButtons = wx.FlexGridSizer(1, 2, 10, 10)
        grdDelay = wx.FlexGridSizer(1, 2, 10, 10)
        #fraActions = wx.StaticBoxSizer(self.fraActions_staticbox, wx.VERTICAL)
        grdInterval = wx.FlexGridSizer(1, 2, 10, 10)
        szrRainSensor.Add(self.chkEnableRainSensor, 0, wx.ALL, 10)
        grdInterval.Add(self.lblInterval, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdInterval.Add(self.spnInterval, 0, wx.EXPAND, 0)
        grdInterval.AddGrowableCol(1)
        szrRainSensor.Add(grdInterval, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        #fraActions.Add(self.chkWarningMessage, 0, wx.ALL, 5)
        #fraActions.Add(self.chkShutdown, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM, 5)
        #szrRainSensor.Add(fraActions, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        #grdDelay.Add(self.lblDelay, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        #grdDelay.Add(self.spnDelay, 0, wx.EXPAND, 0)
        #grdDelay.AddGrowableCol(1)
        #szrRainSensor.Add(grdDelay, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        grdButtons.Add(self.cmdOkay, 0, 0, 0)
        grdButtons.Add(self.Cancel, 0, 0, 0)
        szrRainSensor.Add(grdButtons, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrRainSensor)
        szrRainSensor.Fit(self)
        self.Layout()
        # end wxGlade
	
    def SetValues(self, pollrate):
        pass

# ==============================================================================
# POWER MANAGMENT FRAME
# ==============================================================================

class PowerFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PowerFrame.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.fraShutdownTime_staticbox = wx.StaticBox(self, -1, "Shutdown Time Settings")
        self.fraTelescopePower_staticbox = wx.StaticBox(self, -1, "Telescope Power")
        self.cmdPowerOn = wx.Button(self, -1, "ON")
        self.cmdPowerOff = wx.Button(self, -1, "OFF")
        self.chkEnableAutoShutdown = wx.CheckBox(self, -1, "Enable Automatic Shutdown")
        #self.lblDate = wx.StaticText(self, -1, "Date")
        #self.dpkShutdownDate = wx.DatePickerCtrl(self, -1)
        self.lblTime = wx.StaticText(self, -1, "Time (HH:MM)")
        
        self.parent = args[0]

        hours = []
        for i in range(0,24): 
            hours.append(str(i))        

        self.cboHour = wx.Choice(self, -1, choices=hours)
        self.lblColon = wx.StaticText(self, -1, ":")
        
        minutes = []
        for i in range(0,60): 
            minutes.append(str(i))
        
        self.cboMinute = wx.Choice(self, -1, choices=minutes)
        self.cmdOK = wx.Button(self, wx.ID_OK, "")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")
        
        self.enableShutdown = False
        self.date = datetime.datetime.now()
        self.hour = 0
        self.minute = 0
        
        self.tmrPowerOff = wx.Timer(self)

        self.__set_properties()
        self.__do_layout()

        self.cmdPowerOff.Bind(wx.EVT_LEFT_DOWN, self.PowerOffDown)
        self.cmdPowerOff.Bind(wx.EVT_LEFT_UP, self.PowerOffUp)
        # end wxGlade
        
        self.Bind(wx.EVT_TIMER, self.PowerOff, self.tmrPowerOff)
        #self.Bind(wx.EVT_CHECKBOX, self.OnChecked, self.chkEnableAutoShutdown)
        
        #self.CheckOkayAllowed()

    def __set_properties(self):
        # begin wxGlade: PowerFrame.__set_properties
        self.SetTitle("Power Managment")
        self.cmdPowerOn.Enable(False)
        self.cboHour.SetSelection(0)
        self.cboMinute.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PowerFrame.__do_layout
        szrAutoShutdown = wx.BoxSizer(wx.VERTICAL)
        grdButtons = wx.GridSizer(1, 2, 10, 10)
        fraShutdownTime = wx.StaticBoxSizer(self.fraShutdownTime_staticbox, wx.VERTICAL)
        grdTimeSettings = wx.FlexGridSizer(2, 2, 10, 10)
        grdTime = wx.FlexGridSizer(1, 3, 5, 5)
        fraTelescopePower = wx.StaticBoxSizer(self.fraTelescopePower_staticbox, wx.HORIZONTAL)
        fraTelescopePower.Add(self.cmdPowerOn, 1, wx.ALL|wx.EXPAND, 5)
        fraTelescopePower.Add(self.cmdPowerOff, 1, wx.RIGHT|wx.TOP|wx.BOTTOM|wx.EXPAND, 5)
        szrAutoShutdown.Add(fraTelescopePower, 0, wx.ALL|wx.EXPAND, 10)
        fraShutdownTime.Add(self.chkEnableAutoShutdown, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 5)
        #grdTimeSettings.Add(self.lblDate, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        #grdTimeSettings.Add(self.dpkShutdownDate, 0, wx.EXPAND, 0)
        grdTimeSettings.Add(self.lblTime, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdTime.Add(self.cboHour, 0, 0, 0)
        grdTime.Add(self.lblColon, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdTime.Add(self.cboMinute, 0, 0, 0)
        grdTimeSettings.Add(grdTime, 1, wx.EXPAND, 0)
        grdTimeSettings.AddGrowableCol(1)
        fraShutdownTime.Add(grdTimeSettings, 1, wx.ALL|wx.EXPAND, 5)
        szrAutoShutdown.Add(fraShutdownTime, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        grdButtons.Add(self.cmdOK, 0, 0, 0)
        grdButtons.Add(self.cmdCancel, 0, 0, 0)
        szrAutoShutdown.Add(grdButtons, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrAutoShutdown)
        szrAutoShutdown.Fit(self)
        self.Layout()
        self.Center()
        # end wxGlade
        
    def OnChecked(self, evt):
        self.CheckOkayAllowed()

    #def CheckOkayAllowed(self):
    #    if self.chkEnableAutoShutdown.GetValue():
    #        self.cmdOK.Enable(True)
    #    else:
    #        self.cmdOK.Enable(False)

    def SetValues(self, enable, date, hour, minute, hwc):
        self.enableShutdown = enable
        self.date = date
        self.hour = hour
        self.minute = minute
        
        self.hwc = hwc
        
        self.chkEnableAutoShutdown.SetValue(self.enableShutdown)
        self.cboHour.SetSelection(hour) 
        self.cboMinute.SetSelection(minute) 
    
    def GetValues(self):
        self.enableShutdown = self.chkEnableAutoShutdown.GetValue()
        self.hour = self.cboHour.GetSelection()
        self.minute = self.cboMinute.GetSelection()
        
        return (self.enableShutdown, self.hour, self.minute)

    def PowerOffDown(self, event):
        self.tmrPowerOff.Start(DEFAULT_REPEAT_INTERVAL)
        event.Skip()

    def PowerOffUp(self, event):
        self.tmrPowerOff.Stop()
        self.parent.hwc.resetDataRange()
        event.Skip()

    # ==========================================================================
    # Timer Callbacks
    # ==========================================================================

    def PowerOff(self, event):
        self.parent.hwc.setData(POWER_OFF)
        event.Skip()

# ==============================================================================
# DOME TRACKING/AUTOMATION FRAME
# ==============================================================================

class DomeTrackingFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        #self.szrSettings_staticbox = wx.StaticBox(self, -1, "Tracking Settings")
        self.fraTarget_staticbox = wx.StaticBox(self, -1, "Target Object")
        self.bitmap_3 = wx.StaticBitmap(self, -1, wx.Bitmap(os.path.join(IMAGE_DIRECTORY, "Observatory-icon2.png"), wx.BITMAP_TYPE_ANY))
        self.lblDescription = wx.StaticText(self, -1, "Before using dome automation, centre the dome\nopening on the object for best results.")
        #self.chkEnabled = wx.CheckBox(self, -1, "Enable Dome Tracking (click OK to set)")
        self.rdoFollowTelescope = wx.RadioButton(self, -1, "Telescope Position")
        self.rdoFollowGlobalTarget = wx.RadioButton(self, -1, "Session Target (None)")
        #self.label_8 = wx.StaticText(self, -1, "Difference Threshold (Degrees)")
        #self.spnDiff = wx.SpinCtrl(self, -1, "3", min=1, max=8)
        #self.label_9 = wx.StaticText(self, -1, "Polling Interval (seconds)")
        #self.spnPollingInterval = wx.SpinCtrl(self, -1, "60", min=0, max=300)
        self.cmdOkay = wx.Button(self, wx.ID_OK, "&Begin Tracking")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

    def __set_properties(self):
        self.SetTitle("Automated Dome Tracking")

    def __do_layout(self):
        szrMain = wx.BoxSizer(wx.VERTICAL)
        grdButtons = wx.GridSizer(1, 2, 10, 10)
        #szrSettings = wx.StaticBoxSizer(self.szrSettings_staticbox, wx.VERTICAL)
        #grdSettings = wx.FlexGridSizer(2, 2, 10, 10)
        fraTarget = wx.StaticBoxSizer(self.fraTarget_staticbox, wx.VERTICAL)
        grdDescription = wx.FlexGridSizer(1, 2, 10, 10)
        grdDescription.Add(self.bitmap_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdDescription.Add(self.lblDescription, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdDescription.AddGrowableCol(1)
        szrMain.Add(grdDescription, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        #szrMain.Add(self.chkEnabled, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        fraTarget.Add(self.rdoFollowTelescope, 0, wx.ALL, 5)
        fraTarget.Add(self.rdoFollowGlobalTarget, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM, 5)
        szrMain.Add(fraTarget, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        #grdSettings.Add(self.label_8, 0, wx.LEFT|wx.TOP|wx.ALIGN_CENTER_VERTICAL, 5)
        #grdSettings.Add(self.spnDiff, 0, wx.RIGHT|wx.TOP|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 5)
        #grdSettings.Add(self.label_9, 0, wx.LEFT|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 5)
        #grdSettings.Add(self.spnPollingInterval, 0, wx.RIGHT|wx.BOTTOM|wx.EXPAND, 5)
        #grdSettings.AddGrowableCol(1)
        #szrSettings.Add(grdSettings, 1, wx.EXPAND, 0)
        #szrMain.Add(szrSettings, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        grdButtons.Add(self.cmdOkay, 0, 0, 0)
        grdButtons.Add(self.cmdCancel, 0, 0, 0)
        szrMain.Add(grdButtons, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrMain)
        szrMain.Fit(self)
        self.Layout()
    
    def GetValues(self):
        enabled = True
        
        if self.rdoFollowTelescope.GetValue() == True:
            trackingMode = 1
        elif self.rdoFollowGlobalTarget.GetValue() == True:
            trackingMode = 0
            
        #diffThreshold = self.spnDiff.GetValue()
        #pollTime = self.spnPollingInterval.GetValue()
        
        return (enabled, trackingMode, 0, 0)
    
    def SetValues(self, enabled, trackingMode, target, diffThreshold, pollTime):
        #self.chkEnabled.SetValue(enabled)
        if target != None:
            self.rdoFollowGlobalTarget.SetLabel("Current Target (" + target + ")")
        else:
            self.rdoFollowGlobalTarget.Disable()
        
        if trackingMode == 1:
            self.rdoFollowTelescope.SetValue(True)
        elif trackingMode == 0:
            self.rdoFollowGlobalTarget.SetValue(True)
            
        #self.spnDiff.SetValue(diffThreshold)
        #self.spnPollingInterval.SetValue(pollTime)



# ==============================================================================
# SCREEN NAVE
# ==============================================================================

class VisualNavigator(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ArgoDisplay.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.pnlDisplay = wx.Panel(self, -1)
        
        import vnav
        self.vnav_window = vnav.VNavWin(self)
                
        self.timer = wx.Timer(self, TIMER_ID)
        wx.EVT_TIMER(self, TIMER_ID, self.on_timer)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        
        self.parent = args[0]
        self.parent.digitalSettingCirclesCount += 1
        
        self.__set_properties()
        self.__do_layout()

        self.timer.Start(250)
        # end wxGlade
    
    def on_timer(self, evt):
        pass
        
    def __set_properties(self):
        # begin wxGlade: ArgoDisplay.__set_properties
        self.SetTitle("Visual Navigator")
        self.SetSize((1200, 960))
        self.SetBackgroundColour(wx.Colour(0, 0, 0))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ArgoDisplay.__do_layout
        szrMain = wx.BoxSizer(wx.HORIZONTAL)
        szrMain.Add(self.coord_disp, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 24) #|wx.ALIGN_CENTER_VERTICAL
        self.SetSizer(szrMain)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnClose(self, event): # wxGlade: ObsControlPanel.<event_handler>
        self.parent.digitalSettingCirclesCount -= 1
        self.parent.digitalSettingCircles = None
        self.Destroy()

# ==============================================================================
# DIGITAL SETTING CIRCLES
# ==============================================================================

class DigitalSettingCircles(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ArgoDisplay.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.pnlDisplay = wx.Panel(self, -1)
        
        import sysdisp
        self.coord_disp = sysdisp.CoordDisplay(self)
                
        self.timer = wx.Timer(self, TIMER_ID)
        wx.EVT_TIMER(self, TIMER_ID, self.on_timer)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        
        self.parent = args[0]
        self.parent.digitalSettingCirclesCount += 1
        
        self.__set_properties()
        self.__do_layout()

        self.timer.Start(250)
        # end wxGlade
    
    def on_timer(self, evt):
        pass
        
    def __set_properties(self):
        # begin wxGlade: ArgoDisplay.__set_properties
        self.SetTitle("Setting Circles")
        self.SetSize((1200, 960))
        self.SetBackgroundColour(wx.Colour(0, 0, 0))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ArgoDisplay.__do_layout
        szrMain = wx.BoxSizer(wx.HORIZONTAL)
        szrMain.Add(self.coord_disp, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 24) #|wx.ALIGN_CENTER_VERTICAL
        self.SetSizer(szrMain)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnClose(self, event): # wxGlade: ObsControlPanel.<event_handler>
        self.parent.digitalSettingCirclesCount -= 1
        self.parent.digitalSettingCircles = None
        self.Destroy()

# ==============================================================================
# CONNECTIONS FRAME
# ==============================================================================

class ConnectionsFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ConnectionsFrame.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.fraObservatoryConnection_staticbox = wx.StaticBox(self, -1, "Observatory Automation Connection")
        self.fraArgoConnection_staticbox = wx.StaticBox(self, -1, "Argo Navis Terminal Connection")
        self.label_4 = wx.StaticText(self, -1, "Serial Port")
        self.cboSerialPorts = wx.Choice(self, -1, choices=["COM1", "COM2", "COM17"])
        self.label_5 = wx.StaticText(self, -1, "Baudrate")
        self.cboBaudrate = wx.Choice(self, -1, choices=["38400"])
        self.label_6 = wx.StaticText(self, -1, "Polling Interval (milliseconds)")
        self.spnPollingInterval = wx.SpinCtrl(self, -1, "1", min=250, max=10000)
        self.label_7 = wx.StaticText(self, -1, "Parallel Port Interface")
        self.cboParallelPort = wx.Choice(self, -1, choices=["LPT1 (32-bit)", "LPT2 (32-bit)", 
            "LPT3 (32-bit)", "LPT1 (64-bit)", "LPT2 (64-bit)", "LPT3 (64-bit)"])
        self.cmdOK = wx.Button(self, wx.ID_OK, "")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ConnectionsFrame.__set_properties
        self.SetTitle("Setup Connections")
        self.cboSerialPorts.SetSelection(0)
        self.cboBaudrate.SetSelection(0)
        self.cboParallelPort.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ConnectionsFrame.__do_layout
        szrSetupConnections = wx.BoxSizer(wx.VERTICAL)
        grdButtons = wx.GridSizer(2, 2, 10, 10)
        fraObservatoryConnection = wx.StaticBoxSizer(self.fraObservatoryConnection_staticbox, wx.VERTICAL)
        grdParallelConnection = wx.FlexGridSizer(1, 2, 10, 10)
        fraArgoConnection = wx.StaticBoxSizer(self.fraArgoConnection_staticbox, wx.VERTICAL)
        grdArgoSettings = wx.FlexGridSizer(3, 2, 10, 10)
        grdArgoSettings.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdArgoSettings.Add(self.cboSerialPorts, 0, wx.EXPAND, 0)
        grdArgoSettings.Add(self.label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdArgoSettings.Add(self.cboBaudrate, 0, wx.EXPAND, 0)
        grdArgoSettings.Add(self.label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdArgoSettings.Add(self.spnPollingInterval, 0, 0, 0)
        grdArgoSettings.AddGrowableCol(1)
        fraArgoConnection.Add(grdArgoSettings, 1, wx.ALL|wx.EXPAND, 5)
        szrSetupConnections.Add(fraArgoConnection, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        grdParallelConnection.Add(self.label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdParallelConnection.Add(self.cboParallelPort, 0, wx.EXPAND, 0)
        grdParallelConnection.AddGrowableCol(1)
        fraObservatoryConnection.Add(grdParallelConnection, 1, wx.ALL|wx.EXPAND, 5)
        szrSetupConnections.Add(fraObservatoryConnection, 0, wx.ALL|wx.EXPAND, 10)
        grdButtons.Add(self.cmdOK, 0, 0, 0)
        grdButtons.Add(self.cmdCancel, 0, 0, 0)
        szrSetupConnections.Add(grdButtons, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.ALIGN_RIGHT, 10)
        self.SetSizer(szrSetupConnections)
        szrSetupConnections.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade
    
    def SetValues(self, term_addr=1, term_baud=0, term_poll=500, par_port='lpt1', evt=None):
        self.cboSerialPorts.SetSelection(term_addr)
        self.cboBaudrate.SetSelection(term_baud)
        self.spnPollingInterval.SetValue(term_poll)
        
    def GetValues(self, evt=None):
        term_addr = self.cboSerialPorts.GetSelection()
        term_baud = int(self.cboBaudrate.GetStringSelection())
        term_poll = int(self.spnPollingInterval.GetValue())
        
        return term_addr, term_baud, term_poll
        
# end of class ConnectionsFrame

# ==============================================================================
# CONFIGURE SERVER FRAME
# ==============================================================================

class ConfigureServerFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ConfigureServerFrame.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.fraServerSettings_staticbox = wx.StaticBox(self, -1, "Server Settings")
        self.fraClients_staticbox = wx.StaticBox(self, -1, "Client Type")
        self.bmpServer = wx.StaticBitmap(self, -1, wx.Bitmap(os.path.join(IMAGE_DIRECTORY,"computer.png"), wx.BITMAP_TYPE_ANY))
        self.lblTip = wx.StaticText(self, -1, "wxDomeTracker must be restarted for these \nsettings to take effect!")
        self.rdoStellarium = wx.RadioButton(self, -1, "Stellarium")
        self.rdoSoftwareBisque = wx.RadioButton(self, -1, "Software Bisque TheSkyX")
        self.chkEnableServerOnStart = wx.CheckBox(self, -1, "Enable server daemon on program start?")
        self.lblIPAddress = wx.StaticText(self, -1, "Host Address")
        self.txtIPAddress = wx.TextCtrl(self, -1, "localhost")
        self.lblPortLabel = wx.StaticText(self, -1, "Port")
        self.spnPort = wx.SpinCtrl(self, -1, "10001", min=1024, max=20000)
        self.lblRefreshRate = wx.StaticText(self, -1, "Packet Rate (ms)")
        self.spnRefreshRate = wx.SpinCtrl(self, -1, "100", min=50, max=1000)
        self.cmdOkay = wx.Button(self, wx.ID_OK, "")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")
        
        self.enableOnStart = 0
        self.hostaddress = 'localhost'
        self.port = 10001
        self.packetrate = 150

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ConfigureServerFrame.__set_properties
        self.SetTitle("Configure Planetarium Server")
        self.rdoStellarium.SetValue(1)
        self.rdoSoftwareBisque.Enable(False)
        self.txtIPAddress.SetMinSize((163, 27))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ConfigureServerFrame.__do_layout
        szrMain = wx.BoxSizer(wx.VERTICAL)
        grdControls = wx.FlexGridSizer(1, 2, 10, 10)
        fraServerSettings = wx.StaticBoxSizer(self.fraServerSettings_staticbox, wx.VERTICAL)
        grdSettings = wx.FlexGridSizer(3, 2, 5, 5)
        fraClients = wx.StaticBoxSizer(self.fraClients_staticbox, wx.VERTICAL)
        grdHeading = wx.FlexGridSizer(1, 2, 10, 10)
        grdHeading.Add(self.bmpServer, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdHeading.Add(self.lblTip, 0, wx.ALIGN_CENTER_VERTICAL, 10)
        grdHeading.AddGrowableCol(1)
        szrMain.Add(grdHeading, 0, wx.ALL|wx.EXPAND, 10)
        fraClients.Add(self.rdoStellarium, 0, wx.ALL, 5)
        fraClients.Add(self.rdoSoftwareBisque, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM, 5)
        szrMain.Add(fraClients, 0, wx.ALL|wx.EXPAND, 10)
        fraServerSettings.Add(self.chkEnableServerOnStart, 0, wx.LEFT|wx.RIGHT|wx.TOP, 5)
        grdSettings.Add(self.lblIPAddress, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdSettings.Add(self.txtIPAddress, 0, wx.EXPAND, 0)
        grdSettings.Add(self.lblPortLabel, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdSettings.Add(self.spnPort, 0, wx.EXPAND, 0)
        grdSettings.Add(self.lblRefreshRate, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdSettings.Add(self.spnRefreshRate, 0, wx.EXPAND, 0)
        grdSettings.AddGrowableCol(1)
        fraServerSettings.Add(grdSettings, 1, wx.ALL|wx.EXPAND, 5)
        szrMain.Add(fraServerSettings, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        grdControls.Add(self.cmdOkay, 0, 0, 0)
        grdControls.Add(self.cmdCancel, 0, 0, 0)
        szrMain.Add(grdControls, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrMain)
        szrMain.Fit(self)
        self.Layout()
        # end wxGlade
    
    def GetValues(self):
        self.enableOnStart = self.chkEnableServerOnStart.GetValue()
        self.hostaddress = self.txtIPAddress.GetValue()
        self.port = self.spnPort.GetValue()
        self.packetrate = self.spnRefreshRate.GetValue()
        
        if self.enableOnStart == True:
            self.enableOnStart = 1
        else:
            self.enableOnStart = 0
        
        return (self.enableOnStart, self.hostaddress, self.port, self.packetrate)
        
    def SetValues(self, enable, host, port, packetrate):
        self.enableOnStart = enable
        print self.enableOnStart
        self.hostaddress = host
        self.port = port
        self.packetrate = packetrate
        
        self.chkEnableServerOnStart.SetValue(self.enableOnStart)
        self.txtIPAddress.SetValue(self.hostaddress)
        self.spnPort.SetValue(self.port)
        self.spnRefreshRate.SetValue(self.packetrate)

class StarBrowserFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.fraSearchResults_staticbox = wx.StaticBox(self, -1, "Search Results")
        self.fraFind_staticbox = wx.StaticBox(self, -1, "Find Object")
        self.label_19 = wx.StaticText(self, -1, "Search Index:")
        self.cboIndex = wx.Choice(self, -1, choices=["Star ID", "HIP", "HD", "Gliese", "Proper Name", "Spectrum"])
        self.label_20 = wx.StaticText(self, -1, "Search String:")
        self.txtSearchBox = wx.TextCtrl(self, -1, "")
        self.cmdFind = wx.Button(self, -1, "&Find Object")
        self.lstStarDisplay = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.LC_SINGLE_SEL|wx.SUNKEN_BORDER)
        self.cmdOkay = wx.Button(self, wx.ID_OK, "")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")
        self.selected = None
        self.searchName = None

        self.__set_properties()
        self.__do_layout()
        
        self.Bind(wx.EVT_TEXT_ENTER, self.OnFind, self.txtSearchBox)
        self.Bind(wx.EVT_BUTTON, self.OnFind, self.cmdFind)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, self.lstStarDisplay)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, self.lstStarDisplay)
    
    def __set_properties(self):
        # begin wxGlade: StarBrowserFrameClass.__set_properties
        self.SetTitle("Object Browser - HYG Star Database")
        self.SetSize((800, 600))
        self.cboIndex.SetSelection(4)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: StarBrowserFrameClass.__do_layout
        szrObjectBrowser = wx.BoxSizer(wx.VERTICAL)
        grdButtons = wx.GridSizer(1, 2, 10, 10)
        fraSearchResults = wx.StaticBoxSizer(self.fraSearchResults_staticbox, wx.VERTICAL)
        fraFind = wx.StaticBoxSizer(self.fraFind_staticbox, wx.VERTICAL)
        grdBrowserControls = wx.FlexGridSizer(1, 5, 10, 10)
        grdBrowserControls.Add(self.label_19, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdBrowserControls.Add(self.cboIndex, 0, wx.EXPAND, 0)
        grdBrowserControls.Add(self.label_20, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdBrowserControls.Add(self.txtSearchBox, 0, wx.EXPAND, 0)
        grdBrowserControls.Add(self.cmdFind, 0, wx.EXPAND, 0)
        grdBrowserControls.AddGrowableCol(3)
        fraFind.Add(grdBrowserControls, 0, wx.ALL|wx.EXPAND, 5)
        szrObjectBrowser.Add(fraFind, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        fraSearchResults.Add(self.lstStarDisplay, 1, wx.ALL|wx.EXPAND, 5)
        szrObjectBrowser.Add(fraSearchResults, 1, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        grdButtons.Add(self.cmdOkay, 0, 0, 0)
        grdButtons.Add(self.cmdCancel, 0, 0, 0)
        szrObjectBrowser.Add(grdButtons, 0, wx.ALL|wx.ALIGN_RIGHT, 10)
        self.SetSizer(szrObjectBrowser)
        self.Layout()
        self.Center()
 
    def GetDatabaseObject(self, database, idx):
        conn = sqlite3.connect(database)
        c = conn.cursor()

        c.execute('select * from objects where StarID=' + str(idx))
        for row in c:
            data = row
        
        return data

    def OnTextEnter(self, event):
        print "Event handler `OnTextEnter' not implemented!"
        event.Skip()
    
    def GetTargetObject(self):
        # (27919, 27989, 39801, 2061, u'', u'58Alp Ori', u'Betelgeuse', 5.91952477, 7.40703634, 131.061598951507, 27.33, 10.86, 21, 0.45, -5.1373773102256, u'M2Ib', 1.5)
        if self.selected != None:
            obj = self.GetDatabaseObject(SQL_DATABASE, self.selected)
            
            name = ""
            if self.searchName == 0:
                name = "ID %s" % obj[0]
            elif self.searchName == 1:
                name = "HIP %s" % obj[1]
            elif self.searchName == 2:
                name = "HD %s" % obj[2]
            elif self.searchName == 3:
                name = "%s" % obj[4]
            elif self.searchName == 4:
                name = "%s" % obj[6]
            else:
                name = "ID %s" % obj[0]
            
            object_data = { "HYG_ID"        : obj[0], 
                            "HIP"           : obj[1], 
                            "HD"            : obj[2], 
                            "HR"            : obj[3], 
                            "GLIESE"        : obj[4], 
                            "BF"            : obj[5], 
                            "RA"            : obj[7], 
                            "DEC"           : obj[8], 
                            "PROPER_NAME"   : obj[6], 
                            "DISTANCE"      : obj[9], # in pc
                            "MAGNITUDE"     : obj[10], 
                            "ABS_MAGNITUDE" : obj[11], 
                            "SPECTRUM"      : obj[12], 
                            "COLOUR_INDEX"  : obj[13], 
                            "DISPLAY_NAME"  : name
                          }        
        else:
            object_data = None
        
        return object_data

    def OnFind(self, event):
        if self.txtSearchBox.GetValue != '':
            conn = sqlite3.connect(SQL_DATABASE)
            c = conn.cursor()
            
            searchString = self.txtSearchBox.GetValue()
            modifier = {0 : "StarID", 1 : "HIP", 2 : "HD", 3 : "Gliese", 4 : "ProperName", 5 : "Spectrum"}
            
            if searchString != "":
                if (self.cboIndex.GetSelection() in [0, 1, 2]) and (searchString.isdigit()):
                    c.execute('SELECT * FROM objects WHERE ' + modifier[self.cboIndex.GetSelection()] + '=' + searchString)
                #elif:
                    #dlg = wx.MessageDialog(self, "This catalog requires an integer search string.",
                                           #"Database Error",
                                           #wx.OK | wx.ICON_INFORMATION
                                           ##wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                           #)
                    #if dlg.ShowModal() == wx.ID_OK:
                        #pass
                        
                    #dlg.Destroy()
                    
                if self.cboIndex.GetSelection() in [3, 4, 5]:
                    c.execute('SELECT * FROM objects WHERE ' + modifier[self.cboIndex.GetSelection()] + ' LIKE "%' + searchString + '%"')
                
                self.searchName = self.cboIndex.GetSelection()
                self.lstStarDisplay.ClearAll()

                self.lstStarDisplay.InsertColumn(1, "Star ID")
                self.lstStarDisplay.InsertColumn(2, "HIP")
                self.lstStarDisplay.InsertColumn(3, "HD")
                self.lstStarDisplay.InsertColumn(4, "Gliese")
                self.lstStarDisplay.InsertColumn(5, "Proper Name")
                self.lstStarDisplay.InsertColumn(6, "Right Ascension")
                self.lstStarDisplay.InsertColumn(7, "Declination")
                self.lstStarDisplay.InsertColumn(8, "Distance (pc)")
                self.lstStarDisplay.InsertColumn(9, "Magnitude")
                self.lstStarDisplay.InsertColumn(10, "Absolute Magnitude")
                self.lstStarDisplay.InsertColumn(11, "Spectrum")
                self.lstStarDisplay.InsertColumn(12, "Color Index")
                
                for r in c:
                    index = self.lstStarDisplay.InsertStringItem(r[0], str(r[0]))
                    self.lstStarDisplay.SetStringItem(index, 0, str(r[0]))
                    self.lstStarDisplay.SetStringItem(index, 1, str(r[1]))
                    self.lstStarDisplay.SetStringItem(index, 2, str(r[2]))
                    self.lstStarDisplay.SetStringItem(index, 3, str(r[4]))
                    self.lstStarDisplay.SetStringItem(index, 4, str(r[6]))
                    self.lstStarDisplay.SetStringItem(index, 5, str(r[7]))
                    self.lstStarDisplay.SetStringItem(index, 6, str(r[8]))
                    self.lstStarDisplay.SetStringItem(index, 7, str(r[9]))
                    self.lstStarDisplay.SetStringItem(index, 8, str(r[13]))
                    self.lstStarDisplay.SetStringItem(index, 9, str(r[14]))
                    self.lstStarDisplay.SetStringItem(index, 10, str(r[15]))
                    self.lstStarDisplay.SetStringItem(index, 11, str(r[16]))

                self.lstStarDisplay.SetColumnWidth(0, 80)
                self.lstStarDisplay.SetColumnWidth(1, 80)
                self.lstStarDisplay.SetColumnWidth(2, 80)
                self.lstStarDisplay.SetColumnWidth(3, 80)
                self.lstStarDisplay.SetColumnWidth(4, wx.LIST_AUTOSIZE)
                self.lstStarDisplay.SetColumnWidth(5, 120)
                self.lstStarDisplay.SetColumnWidth(6, 120)
                self.lstStarDisplay.SetColumnWidth(7, 100)
                self.lstStarDisplay.SetColumnWidth(8, 100)
                self.lstStarDisplay.SetColumnWidth(9, 145)
                self.lstStarDisplay.SetColumnWidth(10, 80)
                self.lstStarDisplay.SetColumnWidth(11, 80)
                        
    def OnSelected(self, event):        
        self.selected = int(self.lstStarDisplay.GetItemText(self.lstStarDisplay.GetFirstSelected()))
        event.Skip()

    def OnActivated(self, event):
        self.selected = int(self.lstStarDisplay.GetItemText(self.lstStarDisplay.GetFirstSelected()))
        event.Skip()
# end of class StarBrowserFrame

# ==============================================================================
# CONFIGURE SERVER FRAME
# ==============================================================================

class CalibrateArgoFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CalibrateArgoFrame.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.fraOffsetTarget_staticbox = wx.StaticBox(self, -1, "Offset Target")
        self.fraScaleFactors_staticbox = wx.StaticBox(self, -1, "Encoder Scale Factors")
        self.fraAlignTarget_staticbox = wx.StaticBox(self, -1, "Align Target")
        self.chkEnableCalibration = wx.CheckBox(self, -1, "Enable Argo Navis Software Calibration")
        self.cmdSetStar = wx.Button(self, -1, "Star")
        self.cmdSetPlanet = wx.Button(self, -1, "Planet")
        self.label_10 = wx.StaticText(self, -1, "Object Name:")
        self.lblName = wx.StaticText(self, -1, "Object Name")
        self.label_11 = wx.StaticText(self, -1, "Right Ascension:")
        self.lblRightAscension = wx.StaticText(self, -1, "+00h 00m 00s")
        self.label_12 = wx.StaticText(self, -1, "Declination:")
        self.lblDeclination = wx.StaticText(self, -1, "+00d 00m 00s")
        self.lblRAScale = wx.StaticText(self, -1, "RA Scale Factor")
        self.txtRAScale = wx.TextCtrl(self, -1, "1.00")
        self.lblDecScale = wx.StaticText(self, -1, "DEC Scale Factor")
        self.txtDecScale = wx.TextCtrl(self, -1, "1.00")
        self.cmdOkay = wx.Button(self, wx.ID_OK, "")
        self.cmdCancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnSetStar, self.cmdSetStar)
        self.Bind(wx.EVT_BUTTON, self.OnSetPlanet, self.cmdSetPlanet)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CalibrateArgoFrame.__set_properties
        FONT_SIZE = 10
        self.lblName.SetFont(wx.Font(FONT_SIZE, wx.MODERN, wx.NORMAL, wx.BOLD, 0, ""))
        self.lblRightAscension.SetFont(wx.Font(FONT_SIZE, wx.MODERN, wx.NORMAL, wx.BOLD, 0, ""))
        self.lblDeclination.SetFont(wx.Font(FONT_SIZE, wx.MODERN, wx.NORMAL, wx.BOLD, 0, ""))
        self.SetTitle("Calibrate Argo Navis")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CalibrateArgoFrame.__do_layout
        szrCalibrateArgo = wx.BoxSizer(wx.VERTICAL)
        grdButtons = wx.FlexGridSizer(1, 2, 5, 5)
        fraScaleFactors = wx.StaticBoxSizer(self.fraScaleFactors_staticbox, wx.VERTICAL)
        grdScaleFactors = wx.FlexGridSizer(2, 2, 5, 5)
        fraOffsetTarget = wx.StaticBoxSizer(self.fraOffsetTarget_staticbox, wx.VERTICAL)
        grdDisplay = wx.FlexGridSizer(5, 2, 5, 5)
        fraAlignTarget = wx.StaticBoxSizer(self.fraAlignTarget_staticbox, wx.HORIZONTAL)
        szrCalibrateArgo.Add(self.chkEnableCalibration, 0, wx.LEFT|wx.RIGHT|wx.TOP, 10)
        fraAlignTarget.Add(self.cmdSetStar, 1, wx.ALL|wx.EXPAND, 5)
        fraAlignTarget.Add(self.cmdSetPlanet, 1, wx.RIGHT|wx.TOP|wx.BOTTOM|wx.EXPAND, 5)
        szrCalibrateArgo.Add(fraAlignTarget, 0, wx.ALL|wx.EXPAND, 10)
        grdDisplay.Add(self.label_10, 0, 0, 0)
        grdDisplay.Add(self.lblName, 0, 0, 0)
        grdDisplay.Add(self.label_11, 0, 0, 0)
        grdDisplay.Add(self.lblRightAscension, 0, 0, 0)
        grdDisplay.Add(self.label_12, 0, 0, 0)
        grdDisplay.Add(self.lblDeclination, 0, 0, 0)
        grdDisplay.AddGrowableCol(1)
        fraOffsetTarget.Add(grdDisplay, 1, wx.ALL|wx.EXPAND, 5)
        szrCalibrateArgo.Add(fraOffsetTarget, 1, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.EXPAND, 10)
        grdScaleFactors.Add(self.lblRAScale, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdScaleFactors.Add(self.txtRAScale, 0, wx.EXPAND, 0)
        grdScaleFactors.Add(self.lblDecScale, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grdScaleFactors.Add(self.txtDecScale, 0, wx.EXPAND, 0)
        grdScaleFactors.AddGrowableCol(1)
        fraScaleFactors.Add(grdScaleFactors, 1, wx.ALL|wx.EXPAND, 5)
        szrCalibrateArgo.Add(fraScaleFactors, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        grdButtons.Add(self.cmdOkay, 0, 0, 0)
        grdButtons.Add(self.cmdCancel, 0, 0, 0)
        szrCalibrateArgo.Add(grdButtons, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(szrCalibrateArgo)
        szrCalibrateArgo.Fit(self)
        self.Layout()
        # end wxGlade

    def OnSetStar(self, event): # wxGlade: CalibrateArgoFrame.<event_handler>
        print "Event handler `OnSetStar' not implemented!"
        event.Skip()

    def OnSetPlanet(self, event): # wxGlade: CalibrateArgoFrame.<event_handler>
        print "Event handler `OnSetPlanet' not implemented!"
        event.Skip()
